extends c

###########################################################################
#                            TextMate Snippets                            #
###########################################################################

snippet ifndef "#ifndef ..."
#ifndef ${1:`!p snip.rv = snip.basename.upper() or "name"`_H_}
#define $1

$0

#endif //$1
endsnippet

snippet set "setter"
void set_${1}(${2:int} $1_) { $1_ = $1; }
endsnippet

snippet get "getter"
${1} ${2}() const { return $2_; }$0
endsnippet

snippet str "struct .. (struct)"
struct ${1}
{
  $0
};
endsnippet

snippet class "class .. (class)"
class ${1:`!p snip.rv = ''.join(item.title() for item in snip.basename.split('_')) or "name"`}
{
 public:
  $1(${2});
  virtual ~$1();
 private:
};
endsnippet

snippet nsa "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	$0
}${1/.+/ \/\//m}$1${1/.+//m}
endsnippet

snippet inct "#include .. (tests)"
#include "gtest/gtest.h"
#include "${1:`!p
a = snip.basename
b = a.split('_')
b.pop()
c = '_'.join(b)
snip.rv = c + '.h'`}"
endsnippet

snippet test "google TEST macro" b
TEST(${1:`!p
a = snip.basename.split('_')
a.pop()
snip.rv = ''.join(item.title() for item in a) or "name"`}, ${2})
{
  $0
}
endsnippet

snippet exe "Expect_eq for google tests" b
EXPECT_EQ(${1:value}, ${2:call});
endsnippet
snippet ext "Expect_true for google tests" b
EXPECT_TRUE(${1:call});
endsnippet
snippet exf "Expect_false for google tests" b
EXPECT_FALSE(${1:call});
endsnippet

# vim:ft=snippets:
